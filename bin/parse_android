#!/usr/bin/env python3
"""
Generated from: https://android.googlesource.com/platform/system/ca-certificates/
"""
import json
import tarfile
from os import path
from binascii import hexlify
from datetime import datetime
from pathlib import Path
from contextlib import closing
import requests
from OpenSSL.crypto import FILETYPE_PEM, load_certificate
from cryptography.x509 import Certificate, extensions


BASE_URL = 'https://android.googlesource.com/platform/system/ca-certificates'
BASE_PATH = '.data'
REMOTES = [
    {'file': 'android_latest', 'name': 'Android Latest', 'url': f'{BASE_URL}/+archive/master/files.tar.gz'},
    {'file': 'android_12', 'name': 'Android 12 2021', 'url': f'{BASE_URL}/+archive/refs/heads/android12-release/files.tar.gz'},
    {'file': 'android_11', 'name': 'Android 11 2020', 'url': f'{BASE_URL}/+archive/refs/heads/android11-release/files.tar.gz'},
    {'file': 'android_10', 'name': 'Android 10 (Q) 2019', 'url': f'{BASE_URL}/+archive/refs/heads/android10-release/files.tar.gz'},
    {'file': 'android_9', 'name': 'Android 9 (Pie) 2018', 'url': f'{BASE_URL}/+archive/refs/heads/pie-release/files.tar.gz'},
    {'file': 'android_8', 'name': 'Android 8 (Oreo) 2017', 'url': f'{BASE_URL}/+archive/refs/heads/oreo-release/files.tar.gz'},
    {'file': 'android_7', 'name': 'Android 7 (Nougat) 2016', 'url': f'{BASE_URL}/+archive/refs/heads/nougat-release/files.tar.gz'},
]

def get_ski(cert :Certificate) -> str:
    for ext in cert.extensions:
        if isinstance(ext.value, extensions.SubjectKeyIdentifier):
            return hexlify(ext.value.digest).decode('utf-8')

def fetch(url :str, directory :str):
    print(url)
    with closing(requests.get(url, stream=True, allow_redirects=True)) as r:
        file = tarfile.open(fileobj=r.raw, mode="r|gz")
        file.extractall(path=directory)

    handle = Path(directory)
    if not handle.is_dir():
        print(f"directory {directory} doesn't exist")
        exit(1)
    for file_path in handle.glob('*.[0-9]'):
        yield file_path.read_bytes()

def main():
    now = datetime.utcnow()
    for conf in REMOTES:
        untrusted_ski = set()
        lookup = {}
        for pem in fetch(url=conf.get('url'), directory=path.join(BASE_PATH, conf.get('file'))):
            cert = load_certificate(FILETYPE_PEM, pem)
            try:
                ca_ski = get_ski(cert.to_cryptography())
                if ca_ski:
                    lookup[ca_ski] = pem.decode()
                not_before = cert.to_cryptography().not_valid_before
                not_after = cert.to_cryptography().not_valid_after
            except ValueError:
                if ca_ski:
                    untrusted_ski.add(ca_ski)
                continue
            if now < not_before or now > not_after:
                untrusted_ski.add(ca_ski)
        untrusted_ski = sorted(list(filter(None, untrusted_ski)))
        store_path = Path(f'src/tlstrust/stores/{conf.get("file")}.py')
        store_path.write_text(f'''"""
Do not modify by hand
Generated by: bin/{path.basename(__file__)}
"""

__module__ = 'tlstrust.stores.{conf.get("file")}'
__version__ = '{conf.get("file")}'
__description__ = '{conf.get("name")}'

UNTRUSTED = {json.dumps(untrusted_ski, indent=4, ensure_ascii=False)}
PEM_FILES = {json.dumps(lookup, sort_keys=True, indent=4, ensure_ascii=False)}
''')

if __name__ == '__main__':
    main()
