#!/usr/bin/env python
"""
Generated from: https://github.com/schors/gost-russian-ca/tree/master/certs
Ministry of Telecom and Mass Communications of Russia | Минкомсвязь России
AKA
MinTsifry Rossii | Минцифры России
"""
import json
import tarfile
from os import path
from binascii import hexlify
from datetime import datetime
from pathlib import Path
from contextlib import closing
from urllib import request
import requests
from OpenSSL.crypto import FILETYPE_PEM, load_certificate
from cryptography.x509 import Certificate, extensions

BASE_PATH = ".data"
BEGIN = "-----BEGIN CERTIFICATE-----"
END = "-----END CERTIFICATE-----"
REMOTE = "https://raw.githubusercontent.com/schors/gost-russian-ca/master/certs/ca-certificates.pem"
STORE_NAME = "mintsifry_rossii"

def get_ski(cer :Certificate) -> str:
    for ext in cer.extensions:
        if isinstance(ext.value, extensions.SubjectKeyIdentifier):
            return hexlify(ext.value.digest).decode("utf-8")


def fetch(url :str, directory :str):
    handle = Path(directory)
    if not handle.is_dir():
        handle.mkdir()
    if not handle.is_dir():
        print(f"directory {directory} doesn't exist")
        exit(1)
    if url.endswith(".tar.gz"):
        with closing(requests.get(url, stream=True, allow_redirects=True)) as r:
            file = tarfile.open(fileobj=r.raw, mode="r|gz")
            file.extractall(path=directory)
        for file_path in handle.glob("*.[0-9]"):
            yield file_path.read_bytes()
    if url.endswith(".pem"):
        extract_files(url, directory)
        for file_path in handle.glob("*.pem"):
            yield file_path.read_bytes()


def extract_files(url, directory):
    store_path = f"/tmp/{url.split('/')[-1]}"
    request.urlretrieve(url, store_path)
    handle = Path(store_path)
    if not handle.is_file():
        print(f"file {store_path} doesn't exist")
        exit(1)
    certs = {}
    current_key = -1
    pem_lines = ""
    for line in handle.read_text(encoding="utf8").splitlines():
        if line.startswith(BEGIN):
            pem_lines = BEGIN + "\n"
            current_key += 1
            continue
        if line.startswith(END):
            pem_lines += END
            certs[current_key] = pem_lines
            continue
        if line:
            pem_lines += line + "\n"
    for key, pem in certs.items():
        pem_handle = Path(f"{directory}/{key}.pem")
        pem_handle.write_text(pem, encoding="utf8")


def main():
    now = datetime.utcnow()
    untrusted_ski = set()
    lookup = {}
    directory = path.join(BASE_PATH, STORE_NAME)
    for pem in fetch(url=REMOTE, directory=directory):
        cert = load_certificate(FILETYPE_PEM, pem)
        try:
            ca_ski = get_ski(cert.to_cryptography())
            if ca_ski:
                lookup[ca_ski] = pem.decode()
            not_before = cert.to_cryptography().not_valid_before
            not_after = cert.to_cryptography().not_valid_after
        except ValueError:
            if ca_ski:
                untrusted_ski.add(ca_ski)
            continue
        if now < not_before or now > not_after:
            untrusted_ski.add(ca_ski)
    untrusted_ski = sorted(list(filter(None, untrusted_ski)))
    store_path = Path(f"src/tlstrust/stores/{STORE_NAME}.py")
    store_path.write_text(f'''"""
Do not modify by hand
Generated by: bin/{path.basename(__file__)}
"""

__module__ = "tlstrust.stores.{STORE_NAME}"
__version__ = "{datetime.utcnow().strftime("%Y.%m.%d")}"
__description__ = "The version is the date last generated from open source collection of Russian CA MinTsifry Rossii (Минцифры России)"

UNTRUSTED = {json.dumps(untrusted_ski, indent=4, ensure_ascii=False)}
PEM_FILES = {json.dumps(lookup, sort_keys=True, indent=4, ensure_ascii=False)}
''', encoding="utf8")


if __name__ == "__main__":
    main()
