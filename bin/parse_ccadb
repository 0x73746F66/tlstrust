#!/usr/bin/env python3
"""
Generated from: https://www.ccadb.org/resources
Last Updated: 2021-10-20
"""

import hashlib
from pathlib import Path
from OpenSSL.crypto import X509, FILETYPE_PEM, FILETYPE_ASN1, load_certificate, dump_certificate
import requests
from contextlib import closing
import csv
from io import StringIO
from datetime import datetime

DATE_FMT = '%Y.%m.%d'
REMOTE_CSV = 'https://ccadb-public.secure.force.com/mozilla/IncludedRootsDistrustTLSSSLPEMCSV?TrustBitsInclude=Websites'
PREFIX = 'fingerprint_'

def get_module_fingerprints(file_content :str) -> list[str]:
    fingerprints = set()
    for line in file_content.splitlines():
        if not line.startswith(PREFIX):
            continue
        variable_name, *rest = line.split(' = ')
        fingerprint = variable_name.replace(PREFIX, '')
        fingerprints.add(fingerprint)
    return list(fingerprints)

def save_reference_certificate(fingerprint :str, cert :X509):
    module_path = './src/tlstrust/certificates.py'
    filepath = Path(module_path)
    if not filepath.is_file():
        raise OSError(module_path)
    lookup = get_module_fingerprints(filepath.read_text())
    pem = dump_certificate(FILETYPE_PEM, cert)
    if fingerprint not in lookup:
        with filepath.open("a", encoding='utf8') as f:
            f.write(f'{PREFIX}{fingerprint} = """{pem.decode("utf8")}"""\n')

if __name__ == '__main__':
    fingerprints = set()
    with closing(requests.get(REMOTE_CSV, stream=True, allow_redirects=True)) as r:
        buff = StringIO(r.text)
        now = datetime.utcnow()
        for item in csv.DictReader(buff, delimiter=',', quotechar='"'):
            distrust_after = item.get('Distrust for TLS After Date')
            if distrust_after:
                distrust_after_date = datetime.strptime(distrust_after, DATE_FMT)
                if now > distrust_after_date:
                    continue
            pem = item.get('PEM')
            if not pem:
                continue
            try:
                cert = load_certificate(FILETYPE_PEM, pem.replace("'-",'-').replace("-'",'-'))
            except Exception:
                print(pem)
                exit(0)
            
            der = dump_certificate(FILETYPE_ASN1, cert)
            fingerprint = hashlib.sha1(der).hexdigest().upper()
            try:
                not_before = cert.to_cryptography().not_valid_before
                not_after = cert.to_cryptography().not_valid_after
            except ValueError:
                continue
            if now < not_before or now > not_after:
                continue
            save_reference_certificate(fingerprint, cert)
            fingerprints.add(fingerprint)
    print(list(fingerprints))
