#!/usr/bin/env python3
"""
Generated from: https://www.ccadb.org/resources
"""
from os.path import basename
import json
from pathlib import Path
from OpenSSL.crypto import FILETYPE_PEM, load_certificate
import requests
from contextlib import closing
import csv
from io import StringIO
from datetime import datetime

DATE_FMT = '%Y.%m.%d'
REMOTE_CSV = 'https://ccadb-public.secure.force.com/mozilla/IncludedRootsDistrustTLSSSLPEMCSV?TrustBitsInclude=Websites'

if __name__ == '__main__':
    issuers = set()
    lookup = {}
    with closing(requests.get(REMOTE_CSV, stream=True, allow_redirects=True)) as r:
        buff = StringIO(r.text)
        now = datetime.utcnow()
        for item in csv.DictReader(buff, delimiter=',', quotechar='"'):
            pem = item.get('PEM')
            if not pem:
                continue
            pem = pem.replace("'-",'-').replace("-'",'-')
            try:
                cert = load_certificate(FILETYPE_PEM, pem.replace("'-",'-').replace("-'",'-'))
            except Exception:
                print(pem)
                exit(0)
            ca_common_name = cert.get_issuer().commonName
            if ca_common_name is not None:
                lookup[ca_common_name] = pem
            distrust_after = item.get('Distrust for TLS After Date')
            if distrust_after:
                distrust_after_date = datetime.strptime(distrust_after, DATE_FMT)
                if now > distrust_after_date:
                    continue
            try:
                not_before = cert.to_cryptography().not_valid_before
                not_after = cert.to_cryptography().not_valid_after
            except ValueError:
                continue
            if now < not_before or now > not_after:
                continue
            issuers.add(ca_common_name)
    issuers = sorted(list(filter(None, issuers)))
    store_path = Path('src/tlstrust/stores/ccadb.py')
    store_path.write_text(f'''"""
Do not modify by hand
Generated by: bin/{basename(__file__)}
"""

__module__ = 'tlstrust.stores.ccadb'

COMMON_NAMES = {json.dumps(issuers, indent=4, ensure_ascii=False)}
PEM_FILES = {json.dumps(lookup, sort_keys=True, indent=4, ensure_ascii=False)}
''')
