#!/usr/bin/env python
"""
Last Updated: 2021-12-12
"""
from os.path import basename
import subprocess
import json
from binascii import hexlify
from pathlib import Path
from datetime import datetime
from OpenSSL.crypto import FILETYPE_PEM, load_certificate
from cryptography.x509 import Certificate, extensions

STORE_PATH = ".data/java"

def get_version():
    return subprocess.run(["java", "--version"], capture_output=True, check=False).stdout.decode().splitlines()[0]


def extract_certs():
    for line in subprocess.run(["keytool", "-list", "-protected", "-cacerts"], capture_output=True, check=False).stdout.decode().splitlines():
        pieces = list(map(str.strip, line.split(",")))
        if len(pieces) < 3 or pieces[2] != "trustedCertEntry":
            continue
        subprocess.run(["keytool", "-cacerts", "-protected", "-exportcert", "-rfc", "-alias", pieces[0], "-file", f"{STORE_PATH}/{pieces[0]}.pem"], check=False)


def get_ski(x509 :Certificate) -> str:
    for ext in x509.extensions:
        if isinstance(ext.value, extensions.SubjectKeyIdentifier):
            return hexlify(ext.value.digest).decode("utf-8")


if __name__ == "__main__":
    handle = Path(STORE_PATH)
    if not handle.is_dir():
        print(f"directory {STORE_PATH} doesn't exist")
        exit(1)
    extract_certs()
    now = datetime.utcnow()
    lookup = {}
    untrusted_ski = set()
    for path in handle.glob("*.pem"):
        pem = path.read_bytes()
        cert = load_certificate(FILETYPE_PEM, pem)
        try:
            ca_ski = get_ski(cert.to_cryptography())
            if ca_ski:
                lookup[ca_ski] = pem.decode()
            not_before = cert.to_cryptography().not_valid_before
            not_after = cert.to_cryptography().not_valid_after
        except ValueError:
            if ca_ski:
                untrusted_ski.add(ca_ski)
            continue
        if now < not_before or now > not_after:
            untrusted_ski.add(ca_ski)

    untrusted_ski = sorted(list(filter(None, untrusted_ski)))
    store_path = Path("src/tlstrust/stores/java.py")
    store_path.write_text(f'''"""
Do not modify by hand
Generated by: bin/{basename(__file__)}
"""

__module__ = "tlstrust.stores.java"
__version__ = "{get_version()}"
__description__ = "Various servers will use different versions, an updated Debian-based server should include the latest Java JDK distributed by Debian"

UNTRUSTED = {json.dumps(untrusted_ski, indent=4, ensure_ascii=False)}
PEM_FILES = {json.dumps(lookup, sort_keys=True, indent=4, ensure_ascii=False)}
''', encoding="utf8")
