#!/usr/bin/env python
"""
Generated from: https://github.com/rustls/webpki-roots
"""
from os.path import basename
from contextlib import closing
import sys
import types
from importlib import import_module
from datetime import datetime
import json
from binascii import hexlify
from pathlib import Path
from OpenSSL.crypto import FILETYPE_PEM, load_certificate
from cryptography.x509 import Certificate, extensions
import requests

REMOTE_WEBPKI = [
    ("extra_constraints", "https://raw.githubusercontent.com/rustls/webpki-roots/main/extra_constraints.py"),
    ("webpki", "https://raw.githubusercontent.com/rustls/webpki-roots/main/build.py")
]


def compile_and_install_module(module_name: str, source_code: str) -> types.ModuleType:
    """Compile source code and install it as a module.

    End result is that `import <module_name>` and `from <module_name> import ...` should work.
    """
    module = types.ModuleType(module_name, "Module created from source code")
    # Execute source in context of empty/fake module
    exec(source_code, module.__dict__)  # pylint: disable=exec-used
    # Insert fake module into sys.modules. It's now a real module
    sys.modules[module_name] = module
    # Imports should work now
    return import_module(module_name)


def get_ski(certificate: Certificate) -> str:
    for ext in certificate.extensions:
        if isinstance(ext.value, extensions.SubjectKeyIdentifier):
            return hexlify(ext.value.digest).decode("utf-8")

def main():
    untrusted_ski = set()
    lookup = {}
    for conf in REMOTE_WEBPKI:
        name, url = conf
        with closing(requests.get(url, stream=True, allow_redirects=True)) as raw:
            compile_and_install_module(name, raw.text)
    from webpki import fetch_bundle, split_bundle  # pylint: disable=import-error
    bundle = fetch_bundle()
    now = datetime.utcnow()
    for raw in split_bundle(bundle):
        lines = []
        for line in raw.splitlines():
            if line.startswith('#'):
                continue
            lines.append(line.strip())
        pem = "\n".join(lines)
        try:
            cert = load_certificate(FILETYPE_PEM, pem)
            ca_ski = get_ski(cert.to_cryptography())
            if ca_ski:
                lookup[ca_ski] = pem
        except Exception:
            if ca_ski:
                untrusted_ski.add(ca_ski)
            continue
        try:
            not_before = cert.to_cryptography().not_valid_before
            not_after = cert.to_cryptography().not_valid_after
        except ValueError:
            untrusted_ski.add(ca_ski)
        if now < not_before or now > not_after:
            untrusted_ski.add(ca_ski)

    untrusted_ski = sorted(list(filter(None, untrusted_ski)))
    store_path = Path("src/tlstrust/stores/rustls.py")
    store_path.write_text(
        f'''"""
Do not modify by hand
Generated by: bin/{basename(__file__)}
"""

__module__ = "tlstrust.stores.rustls"
__version__ = "{datetime.utcnow().strftime("%Y.%m.%d")}"
__description__ = 'The version is the date last generated from github.com/rustls/webpki-roots, it is not versioned and updates are available in an unspecified "timely fashion" as changes are submitted by maintainers'

UNTRUSTED = {json.dumps(untrusted_ski, indent=4, ensure_ascii=False)}
PEM_FILES = {json.dumps(lookup, sort_keys=True, indent=4, ensure_ascii=False)}
''',
        encoding="utf8",
    )


if __name__ == "__main__":
    main()
