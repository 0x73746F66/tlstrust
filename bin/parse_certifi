#!/usr/bin/env python3

from pathlib import Path
from OpenSSL.crypto import X509, FILETYPE_PEM, load_certificate, dump_certificate
from datetime import datetime
"""
Last Updated: 2021-10-20
"""
STORE_PATH = '.venv/lib/python3.9/site-packages/certifi/cacert.pem'
BEGIN = '-----BEGIN CERTIFICATE-----'
END = '-----END CERTIFICATE-----'
FINGERPRINT_REF = '# SHA1 Fingerprint: '
PREFIX = 'fingerprint_'

def get_module_fingerprints(file_content :str) -> list[str]:
    fingerprints = set()
    for line in file_content.splitlines():
        if not line.startswith(PREFIX):
            continue
        variable_name, *rest = line.split(' = ')
        fingerprint = variable_name.replace(PREFIX, '')
        fingerprints.add(fingerprint)
    return list(fingerprints)

def save_reference_certificate(fingerprint :str, cert :X509):
    module_path = './src/tlstrust/certificates.py'
    filepath = Path(module_path)
    if not filepath.is_file():
        raise OSError(module_path)
    lookup = get_module_fingerprints(filepath.read_text())
    pem = dump_certificate(FILETYPE_PEM, cert)
    if fingerprint not in lookup:
        with filepath.open("a", encoding='utf8') as f:
            f.write(f'{PREFIX}{fingerprint} = """{pem.decode("utf8")}"""\n')

if __name__ == '__main__':
    handle = Path(STORE_PATH)
    if not handle.is_file():
        print(f"file {STORE_PATH} doesn't exist")
        exit(1)
    lookup = {}
    current_key = None
    pem_lines = ''
    for line in handle.read_text().splitlines():
        if current_key is None and line.startswith(FINGERPRINT_REF):
            current_key = line.replace(FINGERPRINT_REF, '').replace(':', '').upper()
            continue
        if current_key is not None and not pem_lines and line.startswith(BEGIN):
            pem_lines += BEGIN + '\n'
            continue
        if current_key is not None and pem_lines and line.startswith(END):
            pem_lines += END
            lookup[current_key] = pem_lines
            current_key = None
            pem_lines = ''
            continue
        if current_key is not None and pem_lines:
            pem_lines += line + '\n'

    now = datetime.utcnow()
    fingerprints = set()
    for fingerprint, pem in lookup.items():
        cert = load_certificate(FILETYPE_PEM, pem)
        try:
            not_before = cert.to_cryptography().not_valid_before
            not_after = cert.to_cryptography().not_valid_after
        except ValueError:
            continue
        if now < not_before or now > not_after:
            continue
        save_reference_certificate(fingerprint, cert)
        fingerprints.add(fingerprint)

    print(list(fingerprints))
