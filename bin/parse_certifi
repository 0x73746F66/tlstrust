#!/usr/bin/env python3
"""
pip instal certifi
"""
from os.path import basename
import json
from pathlib import Path
from OpenSSL.crypto import X509, FILETYPE_PEM, load_certificate, dump_certificate
from datetime import datetime

STORE_PATH = '.venv/lib/python3.9/site-packages/certifi/cacert.pem'
BEGIN = '-----BEGIN CERTIFICATE-----'
END = '-----END CERTIFICATE-----'
FINGERPRINT_REF = '# SHA1 Fingerprint: '

if __name__ == '__main__':
    handle = Path(STORE_PATH)
    if not handle.is_file():
        print(f"file {STORE_PATH} doesn't exist")
        exit(1)
    certs = {}
    current_key = None
    pem_lines = ''
    for line in handle.read_text().splitlines():
        if current_key is None and line.startswith(FINGERPRINT_REF):
            current_key = line.replace(FINGERPRINT_REF, '').replace(':', '').upper()
            continue
        if current_key is not None and not pem_lines and line.startswith(BEGIN):
            pem_lines += BEGIN + '\n'
            continue
        if current_key is not None and pem_lines and line.startswith(END):
            pem_lines += END
            certs[current_key] = pem_lines
            current_key = None
            pem_lines = ''
            continue
        if current_key is not None and pem_lines:
            pem_lines += line + '\n'

    now = datetime.utcnow()
    lookup = {}
    untrusted = set()
    for fingerprint, pem in certs.items():
        cert = load_certificate(FILETYPE_PEM, pem)
        ca_common_name = cert.get_issuer().commonName
        if ca_common_name:
            lookup[ca_common_name] = pem
        try:
            not_before = cert.to_cryptography().not_valid_before
            not_after = cert.to_cryptography().not_valid_after
        except ValueError:
            untrusted.add(ca_common_name)
        if now < not_before or now > not_after:
            untrusted.add(ca_common_name)

    untrusted = sorted(list(filter(None, untrusted)))
    store_path = Path('src/tlstrust/stores/certifi.py')
    store_path.write_text(f'''"""
Do not modify by hand
Generated by: bin/{basename(__file__)}
"""

__module__ = 'tlstrust.stores.certifi'

UNTRUSTED = {json.dumps(untrusted, indent=4, ensure_ascii=False)}
PEM_FILES = {json.dumps(lookup, sort_keys=True, indent=4, ensure_ascii=False)}
''')
